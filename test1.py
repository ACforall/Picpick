# -*- coding: utf-8 -*-
import cv2
# Form implementation generated from reading ui file 'test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QFileDialog
import src.func as f

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.showPic = QtWidgets.QLabel(self.centralwidget)
        self.showPic.setGeometry(QtCore.QRect(150, 150, 200, 150))
        self.showPic.setObjectName("showPic")
        self.result = QtWidgets.QLabel(self.centralwidget)
        self.result.setGeometry(QtCore.QRect(440, 250, 200, 250))
        self.result.setObjectName("result")
        self.input = QtWidgets.QPushButton(self.centralwidget)
        self.input.setGeometry(QtCore.QRect(40, 410, 93, 28))
        self.input.setObjectName("input")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(310, 410, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(600, 410, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        # self.input.clicked.connect(MainWindow.btnInput_click) # type: ignore
        # self.pushButton_2.clicked.connect(MainWindow.btnImageFlip_click) # type: ignore
        # self.pushButton_3.clicked.connect(MainWindow.btnImageSave_click) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #按钮关联函数
        self.input.clicked.connect(self.openImage)
        self.pushButton_2.clicked.connect(self.sktech)
        self.pushButton_3.clicked.connect(self.saveImage)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.showPic.setText(_translate("MainWindow", "上传图片显示"))
        self.result.setText(_translate("MainWindow", "处理效果显示"))
        self.input.setText(_translate("MainWindow", "上传图片"))
        self.pushButton_2.setText(_translate("MainWindow", "翻转"))
        self.pushButton_3.setText(_translate("MainWindow", "保存图片"))

        # 选择本地图片上传
    def openImage(self):
        global imgNamepath  # 这里为了方便别的地方引用图片路径，将其设置为全局变量
        # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        # QFileDialog就是系统对话框的那个类第一个参数是上下文，第二个参数是弹框的名字，第三个参数是默认打开的路径，第四个参数是需要的格式
        imgNamepath, imgType = QFileDialog.getOpenFileName(self.centralwidget, "选择图片",
                                                           "D:\\",
                                                           "*.jpg;;*.png;;All Files(*)")
        # 通过文件路径获取图片文件，并设置图片长宽为label控件的长、宽
        img = QtGui.QPixmap(imgNamepath).scaled(self.showPic.width(), self.showPic.height())
        # 在label控件上显示选择的图片
        self.showPic.setPixmap(img)

    # 保存图片到本地(第二种方式:首先提取相对应Qlabel中的图片，然后打开一个保存文件的弹出框，最后保存图片到选中的路径)
    def saveImage(self):
        # 提取Qlabel中的图片
        img = self.result.pixmap().toImage()
        fpath, ftype = QFileDialog.getSaveFileName(self.centralwidget, "保存图片", "d:\\",
                                                   "*.jpg;;*.png;;All Files(*)")
        img.save(fpath)

    # 生成素描图
    def startAction(self):
        img = cv2.imread(imgNamepath)
        img = cv2.resize(img, dsize=(768, 1080))
        # 图像转灰度图像
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # 灰度图像到反转灰度图像
        inverted_gray_image = 255 - gray_image
        # 模糊倒置灰度图像
        blurred_inverted_gray_image = cv2.GaussianBlur(inverted_gray_image, (19, 19), 0)
        # 反转模糊图像
        inverted_blurred_image = 255 - blurred_inverted_gray_image
        # 准备照片素描
        sketck = cv2.divide(gray_image, inverted_blurred_image, scale=256.0)

        rows, columns = sketck.shape
        bytesPerLine = columns
        QImg = QImage(sketck.data, columns, rows, bytesPerLine, QImage.Format_Indexed8)
        # self.labelResult.setPixmap(QPixmap.fromImage(QImg).scaled(
        #     self.labelResult.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

        self.result.setPixmap(QPixmap.fromImage(QImg).scaled(self.result.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))


    def sketch(self):
        QImg=f.startAction(imgNamepath=imgNamepath)
        self.result.setPixmap(QPixmap.fromImage(QImg).scaled(self.result.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def cvimg_to_qtimg(self,cvimg):
        height, width, depth = cvimg.shape
        cvimg = cv2.cvtColor(cvimg, cv2.COLOR_BGR2RGB)
        cvimg = QImage(cvimg.data, width, height, width * depth, QImage.Format_RGB888)

        return cvimg